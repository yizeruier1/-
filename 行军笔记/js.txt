引入js标签   <script src=""></script>       或||       与&&        非!

typeof  (a)括号加不加都行  ;    判断a变量的  数据类型
var sum = ahezi.offsetWidth;  获取宽度

――――――――――――――――――――字符串操作―――――――――――――――――――――



STR.indexOf(str);    返回字符str在字符串STR中第一次出现的位置  从0开始数
			如果字符str在字符串STR中没有 则返回 -1
STR.lastIndexOf(str);    返回字符str在字符串STR中最后一次出现的位置
search与indexOf 相似，配合正则表达式使用   STR.search(str);
match  与正则表达式 配合使用  提供字符串模板
replace("a","b") 查找并替换 用b替换字符串中第一个a生成新的字符串  可以与正则表达式 配合使用

substring(起始位置，结束位置);   substring();参数为负数时 获取整个字符串
slice(起始位置，结束位置)    取字符串的一截  不包括结束位置  不指定结束位置  截取到最后
slice();参数为负数时 从后往前数  倒数第几个

	英文大小写转换：toLowerCase()转小写        to



Math.random();产生一个随机数   console.log()   window属性引发 window.alert()

css：cursor：pointer； 鼠标滑过标签时鼠标的样式   pointer 小手样式   ===全等   值和类型 必须都相等
  
 js事件  小写   例：onclick  鼠标移入事件onmouseover   鼠标移出事件onmouseout   鼠标按下事件onmousedown   鼠标弹起事件onmouseup
 js方法  小驼峰命名法    例：document.getElementById   .style.backgroundColor = 
    js 严格区分大小写！   禁用 - 

script  必须放在DOCUMENT!  之后任意位置  位置不同 网页加载速度不同  </body>之后最快
如果放在body标签之前  js 代码要用Window.onload function 函数包起来 作为引入    body标签之后的js代码不用


97 小写a    65 大写A   

字符串和数字相加   强制转换为  字符串连接运算


<a href="javascript:;"></a>    用js控制实现a标签的点击事件


innerHTML  获取标签之间的裸露的  ！文字！  内容  


――――――――数组：
      push()  在数组的末尾增加数组的元素   不用于工作中  
      pop()   在数组的末尾删除一个 
      shift()  在数组的头部删除一个数组的元素
      unshift()  在数组的头部增加一个数组的元素
ccc
      sort(function(){});    数组排序  从小到大  自动排序  里面可以传参数   自定义排序
      reverse();     翻转数组

Array.join("/"); //该数组成员之间用/连接起来    返回一个字符串
String.split(",");把字符串按(,)规定 分割成数组  如果括号内为空  则每一个字符为一个数组元素
获取字符串长度 ：  obj.length  返回一个数值   为obj字符串的长度


定义数组：   var mycars = new Array()//  var arr = [];声明空数组

________________JS    输出 语句：   document.write/document.writeln 输出后有空格
                         confirm();

arr.concat(arr2)   数组arr合并arr2   arr2元素加到arr数组元素之后




     当元素里面"没有"类(class) 的时候，则可以通过className添加类名  如果里面有类名不能添加 
	例如： obtn.className = "box";    this.className = "box";





 JS――――数据类型  ：  NaN 未知类型-不是一个数字

	八种数据类型：String  Number Array Object Boolean Function undefined NULL

	用typeof判断数据类型的时候，array数组类型和object类型都是  返回object类型

	变量名 instanceof 数据类型   判断该变量是否为后面的数据类型   返回值为true和flase

数据类型的转换――  ： Number（变量名）  把该变量强制转换为number类型

parseInt（变量名）  对该变量取整  值为number   如果该变量为数字组成的string类型，也可以成功
parseFloat  转小数
object.toString();  把对象转化为字符串
	isNaN（变量）――判断该变量是否为数字类型 数字和NULL和布尔 返回值为false其他为true




――――――――――――――――――――――――Math.  数学对象

	Math.floor()  向下取整    Math.ceil() 向上取整
	Math.round()  四舍五入到最接近的整数   Math.max(x,y) 取最大值
	Math.min(x,y)  取最小值   Math.sqr()  平方根   Math.sin()  tan  cos 等等
	Math.pow(x,y)  x的y次方    Math.PI    Math.E   数学常量
	Math.random()  0到1之间的随机小数     
	输出随机n到m之间的数字   Math.floor(Math.random()*(m-n+1)+n)




addEventListener    标准浏览器    低版本IE不支持   多用于移动端

	例：obtn.addEventListener("click",function(){})鼠标点击事件
   removeEventListener   解绑事件   移除鼠标事件   用法  同上



――――――――――――――――――――object 对象―――――――――――――――――――     
		JSON对象   var data = {};  //声明一个空的JSON对象
	声明有初始数据的JSON对象: var movie ={name:"金刚狼3",actor:["a","b","c"],}
		对象调用:  movie.name      movie["name"]
	添加属性值  :  movie.type = "动作/暴力";
	遍历JSON对象 : for (attr in movie){console.log(attr);console.log(tv[attr]);}
	attr 变量表示  movie对象中 所有属性的集合  tv[attr]表示movie所有属性值 
           for  in  循环输出   一一对应    

字符串json  和  json对象 的互相转换  ：JSON.parse(str);安全性高   eval(str);兼容性高
		JSON字符串格式：  属性名和属性值都要加引号。
json对象 转换 为 json字符串  ： JSON.stringify(obj);   



――――――――定时器  :  1 延时定时器 : setTimeout  延迟一段时间后  执行一次  结束
	语法：setTimeout(函数 ,毫秒数); 延迟多少毫秒后 执行 该函数
	clearTimeout(timeId); 关闭定时器  var timeId = setTimeout();

			2 间隔定时器 : setInterval  无限执行 间隔一段时间执行一次 
	语法： var timeId = setInterval(函数 ，毫秒数);  clearInterval(timeId);





―――――――― new Date();获取当前系统标准时间   .getTime();得到时间戳
	.getFullYear();获取年份   .getMonth();获取月份―一月为0  .getDate();获取日  
	.getDay();获取星期― 周日为0     .getHours();获取小时   .getMinutes();获取分钟
	.getSeconds();获取秒     .getMilliSeconds();获取毫秒



------------.getTime();得到时间戳  做倒计时: 未来时间的时间戳 - 当前的时间戳 = 时差



JS动画：   box.offsetLeft    offsetTop    offsetWidth   offsetHeight  获取距离
	获取box的左边距 

获取 元素的当前样式 :  getComputedStyle(obj,false)[样式名称] 例：(abox,false)["opacity"];
IE8及以下 不支持该  方法     IE8及以下用：  obj.currentStyle["opacity"];
这两个方法获取的是对象的纯宽度  而offsetWidth获取的加上边框的总宽度


offsetLeft:（1）.如果父辈元素中有定位的元素，那么就返回距离当前元素最近的定位元素边缘的距离
           （2）.如果父辈元素中没有定位元素，那么就返回相对于body左边缘距离。

-――――――――――――――――检测浏览器是否支持某一个属性

		if(obj.currentStyle){alert("支持");}


―――――――――――――――――――――――DOM―――――――――――――――――――――

	D：document    O:object     M:model   文档对象模型

DOM 常用操作 ：获取节点、创建节点、插入节点、删除节点

获取节点 ： document.querySelectorAll(".box");   通过选择器获取节点 IE9 以下不能用
			获取class为.box的所有节点
	document.querySelector(".box");   获取class为.box的第一个节点

删除节点 ： 父节点.removeChild();  子节点.parentNode   获取该元素的父节点

创建节点 ： document.createElement("li");  //创建元素节点
		document.createTextNode("三生三世");  //创建文本节点

插入节点 ： 把JS创建的节点  插入到页面中显示出来，appendChild(要插入的节点); //插入节点
		父节点.insertBefore(要插入的节点，在哪个节点之前插入);//在父节点之前插入

――――insertBefore 兼容问题   
  insertBefore的第二个参数，如果初始为空，IE浏览器会报错，谷歌等没问题

――属性操作 ： setAttribute  设置节点属性  getAttribute  获得节点属性 removeAttribute
		例 ：　aimg.setAttribute("src","images/1.jpg");
		
节点信息 ：  节点.nodeType  返回值为数字  文本节点为3  元素节点为1
	节点.nodeName  返回该节点的 标签名   返回值为大写的HTML 标签  文本节点为#text

 子节点  ：  box.firstChild  box节点下的第一个子节点   box.lastChild
firstChild-lastChild  IE下获取的是元素  标准浏览器下会获取第一个空节点  例如：回车

box.firstElementChild  第一个元素子节点  不会获取文本  box.lastElementChild

box.childNodes获取box节点下所有的子节点  会包括元素节点和文本节点 包括回车
box.children空节点不会计算在内

克隆节点 ：  var node1 = 要克隆的节点.cloneNode(true); true会把该节点连同下的子节点都克隆


兄弟节点  ： box.nextSibling   box的下一个兄弟节点     previousSibling  box的上一个节点
	box.nextElementSibling  下一个兄弟元素节点  box.previousElementSibling  
	box的上一个兄弟元素节点


―――――――――――――――――――――――BOM―――――――――――――――――――――
		B:browser 浏览器        O:object 对象        M:model 模型
		浏览器提供给开发者的JS接口	核心对象:window

――――window 对象  window.alert("提示文字");警告框   window.confirm("提示文字");对话框

	window.prompt("默认提示语："); 提示输入框

window.open(pageurl,name,窗口参数);   打开一个页面  参数可以多个 控制大小位置 逗号隔开

	window.onscroll  滚动条位置变化时 触发 
	window.onresize  浏览器窗口缩放时 触发该事件   ――遮罩层的登录窗口

document.documentElement.clientWidth   获取当前页面可视区的宽度
document.documentElement.clientHeight    获取当前页面可视区的高度

document.documentElement.scrollWidth   获取当前文档的整个宽度
document.documentElement.scrollHeight	获取当前文档的整个高度



获取滚动的距离 ： document.body.scrollTop(可以被赋值)    谷歌等标准浏览器适  IE不适用
		document.documentElement.scrollTop    用于IE获取
	document.body.scrollLeft   获取横向滚动的距离    用法同上

―――回到顶部 ： 1 锚点   2 不断改变scrollTop 直到变为0  速度=  Math.floor(-scrollTop/8)




――――――location 对象 : 获取当前访问页面的信息
			location.href  当前页面的完整地址
			location.hash  用于页面内跳转，获取的是字符串
			location.port  端口号
			location.host  服务器名称和端口号
			location.hostname  不带端口号的服务器名称
			location.search  返回查询字符串
			location.reload()  当前页面重新加载

――――――history 对象 : 历史记录对象  JS操作浏览器历史记录的接口
			history.back();  后退  回到历史记录的上一步
			history.forward();  前进  
			history.go(n);  回到第n步  n可以为负数 -1等于后退  1等前进


――――――navigator 对象 : 获取一些客户端浏览器信息  名称  引擎  操作系统
			navigator.userAgent(用户代理);
			navigator.appCodeName;    浏览器的字符串表示 
			navigator.appName;    浏览器的名称
			navigator.appVersion;    浏览器的版本/内核
			navigator.platform;    操作系统  

			STR.indexOf(str);    返回字符str在字符串STR中的索引值  从0开始数


――――――――――――――――――――JS事件―――――――――――――――――――――――

	事件冒泡 ： 多个元素嵌套时，点击子元素会触发父元素及父父元素的点击(与子元素相同的)事件  只触发该子元素的事件 不触发他的父元素的事件用e.stopPropagation();

	事件捕获 ： 只触发该子元素的最顶级父元素的该事件 不触发任何子元素的事件用e.
	IE8和以下  不支持捕获  支持冒泡

	冒泡的应用：把li的点击事件放到ul上，以方便动态创建的li自动继承ul的点击事件
	list.onclick = function(e){console.log(e.target.innerHTML);}

	DOM事件级别 ：     DOM0
			所有浏览器都支持
			on + 事件类型：click     解绑 on + 事件类型 = null；
			一个元素只能绑定一次 同类型事件
			如果多次绑定同一类型事件，后面会覆盖前面的
	
	DOM2 ：  绑定 ：element.addEventListener（事件类型，执行的函数名，是否使用捕获T/F）
			解绑 ： element.removeEventListener(同上);
			可以多次绑定同一类型事件

		element = 事件目标 = event target 

	事件对象 (event object) : 
		包含特定事件的详细信息的 一个 对象 

		鼠标位置：  clientX 和 clientY 相对于浏览器窗口左上角为原点定位
			   pageX 和 pageY 相对于文档左边缘

	document.onmousemove = function(event){console.log(event);}//检测鼠标位置事件
	

	键盘事件 ： onkeydown  按下键盘事件时触发
		    onkeyup   按键被松开时触发
		    onkeypress   键盘按键被按下，并且被释放的时候  触发  =  onclick
		    keyCode   返回按键触发时的键盘码   回车=13

		String.fromCharCode(e.keyCode);  返回键盘码对应的键盘符号


――――表单事件  ：  onfocus  得到焦点事件   onblur  失去焦点事件  
			onchange   改变内容事件  在失去焦点时触发
	非表单元素  没有 这些事件    








